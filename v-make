#!/usr/bin/env node
const fs = require("fs");
const menus = {
  help: `
      v-make [command] <options>
  
      component, -c .............. create a new component in components directory.
      module, -m    .............. create a new store module in store/modules directory and update it in index.js in store directory.
      version, -v   .............. show package version.
      help, -h      .............. show help menu for a command.
      `,
  componentHelp: `
      Usage : v-make component [-c] NAME [DIR/NAME]
      
      Create a new component.
      `,
  createComponent: path => {
    const file = path.split("/")[path.split("/").length - 1];
    const dir = path.split(`/`);
    dir.splice(-1, 1);
    const content = `<template>
</template>

<script>
export default {
  name: "${file}",
};
</script>

<style scoped>
</style>`;

    if (path.split("/").length > 1) {
      if (fs.existsSync(`${process.cwd()}/src/components/${path}.vue`)) {
        console.log("\x1b[31m", `Component ${file} already exists.`);
        return process.exit(1);
      }

      fs.mkdirSync(`${process.cwd()}/src/components/${dir.join("/")}`);
      return fs.writeFile(
        `${process.cwd()}/src/components/${path}.vue`,
        content,
        err => {
          if (err) {
            console.log(err);
            return process.exit(1);
          }
          console.log("\x1b[32m", `Component ${file} successful created.`);
        }
      );
    } else {
      if (fs.existsSync(`${process.cwd()}/src/components/${file}.vue`)) {
        console.log("\x1b[31m", `Component ${file} already exists.`);
        return process.exit(1);
      }

      return fs.writeFile(
        `${process.cwd()}/src/components/${file}.vue`,
        content,
        err => {
          if (err) {
            return console.log(err);
          }
          console.log("\x1b[32m", `Component ${file} successful created.`);
        }
      );
    }
  },
  moduleHelp: `
      Usage : v-make module [-m] NAME [DIR/NAME]
      
      Create a new module in store/modules directory.
      `,
  createModule: path => {
    const file = path.split("/")[path.split("/").length - 1];
    const dir = path.split(`/`);
    dir.splice(-1, 1);
    const content = `const state = {};

const getters = {};

const actions = {};

const mutations = {};

export default {
  state,
  getters,
  actions,
  mutations
};`;

    if (path.split("/").length > 1) {
      if (fs.existsSync(`${process.cwd()}/src/store/modules/${path}.js`)) {
        console.log("\x1b[31m", `Module ${file} already exists.`);
        return process.exit(1);
      }

      fs.mkdirSync(`${process.cwd()}/src/store/modules/${dir.join("/")}`);
      return fs.writeFile(
        `${process.cwd()}/src/store/modules/${path}.js`,
        content,
        err => {
          if (err) {
            console.log(err);
            return process.exit(1);
          }
          console.log("\x1b[32m", `Module ${file} successful created.`);
        }
      );
    } else {
      if (fs.existsSync(`${process.cwd()}/src/store/modules/${file}.js`)) {
        console.log("\x1b[31m", `Module ${file} already exists.`);
        return process.exit(1);
      }

      return fs.writeFile(
        `${process.cwd()}/src/store/modules/${file}.js`,
        content,
        err => {
          if (err) {
            return console.log(err);
          }
          console.log("\x1b[32m", `Module ${file} successful created.`);
        }
      );
    }
  },
  version: "0.0.1"
};

//Main Process
if (process.argv.length > 2) {
  switch (process.argv[2]) {
    //Component
    case "-c":
    case "component":
      if (process.argv[3]) {
        if (!fs.existsSync(`${process.cwd()}/src/components`)) {
          fs.mkdirSync(`${process.cwd()}/src/components`);
          return menus.createComponent(process.argv[3]);
        }
        return menus.createComponent(process.argv[3]);
      } else {
        console.log(menus.componentHelp);
        return process.exit(1);
      }
      break;
    //Module
    case "-m":
    case "module":
      if (process.argv[3]) {
        const pjson = require(`${process.cwd()}/package.json`);
        if (pjson.hasOwnProperty("dependencies")) {
          if (dependencies.hasOwnProperty("vuex")) {
            if (
              !fs.existsSync(`${process.cwd()}/src/store`) &&
              !fs.existsSync(`${process.cwd()}/src/store/modules`)
            ) {
              fs.mkdirSync(`${process.cwd()}/src/store`);
              fs.mkdirSync(`${process.cwd()}/src/store/modules`);
              return menus.createModule(process.argv[3]);
            }
          }
          menus.createModule(process.argv[3]);
        } else {
          console.log(
            "\x1b[31m",
            "Please install vuex before create new module"
          );
        }
      } else {
        console.log(menus.moduleHelp);
        return process.exit(1);
      }
      break;
    case "-v":
    case "version":
      console.log(`v-make.${menus.version}`);
      break;
    default:
      console.log(menus.help);
      return process.exit(1);
      break;
  }
} else {
  console.log(menus.help);
  process.exit(1);
}
